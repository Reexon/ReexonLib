<?xml version="1.0" encoding="UTF-8"?>
<project name="reexon.lib" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:if="ant:if" xmlns:unless="ant:unless">

	<description>A Java Library</description>

	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />

	<property name="project.local.lib" value="${basedir}/lib" />
	<property name="ivy.install.version" value="2.0.0-beta1" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="ivy.depency" value="${basedir}/dependencies.xml" />
	<property name="build.dir" value="build" />
	<property name="dist" value="${basedir}" />
	<property name="src.dir" value="src" />

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" excludes="**/*Test.java" encoding="utf-8">
			<classpath>
				<fileset dir="${project.local.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}/lib" />

		<!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
		<jar jarfile="${dist}/lib/MyProject-${DSTAMP}.jar" basedir="${build}" />
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!--
	 download Ivy from web site so that it can be used even without any special installation 
	-->
		<echo message="installing ivy..." />
		<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<!--
	 ================================= 
	          target: install-ivy         
	            this target is not necessary if you put ivy.jar in your ant lib directory
	            if you already have ivy in your ant lib, you can simply remove this
	            target and the dependency the 'go' target has on it
	         ================================= 
	-->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<!--
	 try to load ivy here from local ivy dir, in case the user has not already dropped
	    	      it into ant's lib dir (note that the latter copy will always take precedence).
	    	      We will not fail as long as local lib dir exists (it may be empty) and
	    	      ivy is in at least one of ant's lib dir or the local lib dir. 
	-->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<ivy:configure override="true" file="${ivy.install.dir}/ivy-settings.xml" />
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>
	<!--
	 ================================= 
	          target: go
	                    Go ivy, go!
	         ================================= 
	-->
	<target name="go" depends="install-ivy, generate-src" description="--> resolve dependencies, compile and run the project">
		<echo message="using ivy to resolve commons-lang 2.1..." />
		<!--
	 here comes the magic line: asks ivy to resolve a dependency on 
	             commons-lang 2.1 and to build an ant path with it from its cache  
	-->
		<ivy:cachepath organisation="commons-lang" module="commons-lang" revision="2.1" pathid="lib.path.id" inline="true" />
		<echo message="compiling..." />
		<mkdir dir="${build.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" />
		<echo>
	We are now ready to execute our simple program with its dependency on commons-lang. Let's go!
	</echo>
		<java classname="example.Hello">
			<classpath>
				<path refid="lib.path.id" />
				<path location="${build.dir}" />
			</classpath>
		</java>
	</target>
	<!--
	 ================================= 
	          target: generate-src
	            'Generates' the class source. It actually just echo a simple java 
	            source code to a file. In real life this file would already be
	            present on your file system, and this target wouldn't be necessary.
	         ================================= 
	-->
	<target name="generate-src">
		<mkdir dir="${src.dir}/example" />
		<echo file="${src.dir}/example/Hello.java">
	package example; import org.apache.commons.lang.WordUtils; public class Hello { public static void main(String[] args) { String message = "hello ivy !"; System.out.println("standard message : " + message); System.out.println("capitalized by " + WordUtils.class.getName() + " : " + WordUtils.capitalizeFully(message)); } }
	</echo>
	</target>
	<!--
	 ================================= 
	          target: clean              
	         ================================= 
	-->
	<target name="clean2" description="--> clean the project">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${src.dir}" />
			<fileset dir="${build.dir}" />
		</delete>
	</target>
	<!--
	 ================================= 
	          target: clean-ivy              
	         ================================= 
	-->
	<target name="clean-ivy" description="--> clean the ivy installation">
		<delete dir="${ivy.jar.dir}" />
	</target>
	<!--
	 ================================= 
	          target: clean-cache              
	         ================================= 
	-->
	<target name="clean-cache" depends="install-ivy" description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>

	<target name="ivy-retrieve-eclipse">
		<ivy:configure override="true" file="${ivy.install.dir}/ivy-settings.xml" />
		<ivy:retrieve sync="true" conf="compile,runtime,junit" type="jar,bundle" pattern="${project.local.lib}/[artifact]-[revision].[ext]" />

		<eclipse.refreshLocal depth="infinite" resource="/" if:set="eclipse.running" />
	</target>

	<!--
	 ================================= 
	          target: JAR              
	         ================================= 
	-->


	<jar destfile="${basedir}/temp_final.jar" >
		<zipgroupfileset dir="${basedir}/lib" includes="*.jar" />
	</jar>

	<path id="build.classpath">
		<fileset dir="${basedir}/">
			<include name="${lib.dir}/*.jar" />
		</fileset>
	</path>

	<pathconvert property="mf.classpath" pathsep=" ">
		<path refid="build.classpath" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.jar" to="lib/*.jar" />
			</chainedmapper>
		</mapper>
	</pathconvert>

	<!--
	 ================================= 
	          mf.classpath is used from the package target posted above. This part I copied from somewhere else, so I'm not all that familiar with it.
	         ================================= 
	-->
	<path id="jars">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
	</path>
	
	<target name="-post-jar">

	    <property name="store.jar.name" value="MyJarName"/>

	    <property name="store.dir" value="dist"/>
	    <property name="store.jar" value="${store.dir}/${store.jar.name}.jar"/>

	    <echo message="Packaging ${application.title} into a single JAR at ${store.jar}"/>

	    <jar destfile="${store.dir}/temp_final.jar" filesetmanifest="skip">
	        <zipgroupfileset dir="dist" includes="*.jar"/>
	        <zipgroupfileset dir="dist/lib" includes="*.jar"/>

	        <manifest>
	            <attribute name="Main-Class" value="${main.class}"/>
	        </manifest>
	    </jar>

	    <zip destfile="${store.jar}">
	        <zipfileset src="${store.dir}/temp_final.jar"
	        excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"/>
	    </zip>

	    <delete file="${store.dir}/temp_final.jar"/>
	    <delete dir="${store.dir}/lib"/>
	    <delete file="${store.dir}/README.TXT"/>
	</target>

	
</project>